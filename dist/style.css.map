{"version":3,"sources":["file:/D:/Programming%20Languages/Web%20Development%20Projects%20HTMLCSSJS/FEM-Social-media-dashboard/app/scss/globals/boilerplate.scss","style.css","file:/D:/Programming%20Languages/Web%20Development%20Projects%20HTMLCSSJS/FEM-Social-media-dashboard/app/scss/globals/typography.scss","file:/D:/Programming%20Languages/Web%20Development%20Projects%20HTMLCSSJS/FEM-Social-media-dashboard/app/scss/globals/fonts.scss","file:/D:/Programming%20Languages/Web%20Development%20Projects%20HTMLCSSJS/FEM-Social-media-dashboard/app/scss/globals/colors.scss","file:/D:/Programming%20Languages/Web%20Development%20Projects%20HTMLCSSJS/FEM-Social-media-dashboard/app/scss/components/card.scss","file:/D:/Programming%20Languages/Web%20Development%20Projects%20HTMLCSSJS/FEM-Social-media-dashboard/app/scss/components/toggle.scss"],"names":[],"mappings":"AAIA,KAEI,qBAAA,CADA,cCEJ,CDOA,iBACI,kBCAJ,CDQA,KAGI,6BAAA,CAFA,QAAA,CACA,SCAJ,CCpBA,SACI,YDkCJ,CC1BA,qBACI,oBDiCJ,CE/CA,MACI,+BAAA,CCKA,mBAAA,CACA,mBAAA,CAGA,kBAAA,CACA,iBAAA,CACA,yBAAA,CACA,uBAAA,CACA,iBAAA,CAGA,yBAAA,CACA,uBAAA,CACA,gBAAA,CAGA,iBAAA,CACA,qBAAA,CACA,mBAAA,CACA,oBAAA,CACA,iBAAA,CAGA,eAAA,CACA,sBAAA,CACA,oBAAA,CACA,oBAAA,CACA,qBHwBJ,CInDA,MACI,eJgLJ,CKhLI,gBAII,8BAAA,CADA,iBAAA,CADA,WAAA,CADA,ULmMR","file":"style.css","sourcesContent":["/*\r\n   Set the root font size and box-sizing behavior to create a consistent base for the entire document.\r\n*/\r\n\r\nhtml {\r\n    font-size: 100%;               /* 100% of the browser's default font size (usually 16px) */\r\n    box-sizing: border-box;        /* Ensures padding and border are included in the element's total width/height */\r\n}\r\n\r\n/*\r\n   Apply box-sizing inheritance to all elements and pseudo-elements.\r\n   This prevents unexpected sizing issues across different elements.\r\n*/\r\n\r\n*, *::before, *::after {\r\n    box-sizing: inherit;           /* Inherit box-sizing from the html element */\r\n}\r\n\r\n/*\r\n   Reset margin and padding for the body to eliminate default browser styles.\r\n   Use a custom font family with the variable set in the CSS root.\r\n*/\r\n\r\nbody {\r\n    margin: 0;                     /* Remove default body margin */\r\n    padding: 0;                    /* Remove default body padding */\r\n    font-family: var(--font-inter); /* Use custom font set via CSS variable */\r\n}\r\n\r\n/*\r\n   Explanation:\r\n   1. Setting `font-size: 100%` on the `<html>` ensures predictable scaling based on the user's browser settings.\r\n   2. `box-sizing: border-box` simplifies width and height calculations by including padding and border in the element's total size.\r\n   3. Inheriting `box-sizing` for all elements ensures consistency throughout the layout.\r\n   4. Using CSS variables for the font-family allows easy updates across the project.\r\n*/\r\n","@charset \"UTF-8\";\n/*\n   Set the root font size and box-sizing behavior to create a consistent base for the entire document.\n*/\nhtml {\n  font-size: 100%; /* 100% of the browser's default font size (usually 16px) */\n  box-sizing: border-box; /* Ensures padding and border are included in the element's total width/height */\n}\n\n/*\n   Apply box-sizing inheritance to all elements and pseudo-elements.\n   This prevents unexpected sizing issues across different elements.\n*/\n*, *::before, *::after {\n  box-sizing: inherit; /* Inherit box-sizing from the html element */\n}\n\n/*\n   Reset margin and padding for the body to eliminate default browser styles.\n   Use a custom font family with the variable set in the CSS root.\n*/\nbody {\n  margin: 0; /* Remove default body margin */\n  padding: 0; /* Remove default body padding */\n  font-family: var(--font-inter); /* Use custom font set via CSS variable */\n}\n\n/*\n   Explanation:\n   1. Setting `font-size: 100%` on the `<html>` ensures predictable scaling based on the user's browser settings.\n   2. `box-sizing: border-box` simplifies width and height calculations by including padding and border in the element's total size.\n   3. Inheriting `box-sizing` for all elements ensures consistency throughout the layout.\n   4. Using CSS variables for the font-family allows easy updates across the project.\n*/\n/*\n   Remove default top margin for headings to maintain consistent spacing \n   and prevent unnecessary extra space at the top of sections.\n*/\nh1, h2, h3 {\n  margin-top: 0; /* Eliminates default top margin applied by browsers */\n}\n\n/*\n   Remove default text decoration (underline) for anchor tags in all states.\n   This provides a cleaner, minimal design for links.\n*/\na, a:visited, a:active {\n  text-decoration: none; /* No underline for links in normal, visited, or active states */\n}\n\n/*\n   Explanation:\n   1. Removing `margin-top` on headings avoids unexpected spacing issues when stacking multiple sections.\n   2. Resetting `text-decoration` for links allows better control over link appearance, enabling the use of custom styles (e.g., color, hover effects).\n   3. Consider adding hover styles (e.g., `a:hover { text-decoration: underline; }`) for better user experience.\n*/\n:root {\n  --font-inter: \"Inter\", sans-serif;\n}\n\n/*\n   Define color variables for primary, social media, and theme-specific colors.\n   Using CSS variables makes it easy to switch between dark and light themes.\n*/\n:root {\n  /* Primary Colors */\n  --limegreen: hsl(163, 72%, 41%); /* Used for positive UI feedback */\n  --brightred: hsl(356, 69%, 56%); /* Used for negative UI feedback */\n  /* Social Media Colors */\n  --facebook: hsl(208, 92%, 53%);\n  --twitter: hsl(203, 89%, 53%);\n  --instagram-start: hsl(37, 92%, 70%); /* Instagram gradient start */\n  --instagram-end: hsl(329, 70%, 58%); /* Instagram gradient end */\n  --youtube: hsl(348, 97%, 39%);\n  /* Toggle Button Colors */\n  --toggle-bg-start: hsl(210, 78%, 56%); /* Dark theme toggle gradient start */\n  --toggle-bg-end: hsl(146, 68%, 55%); /* Dark theme toggle gradient end */\n  --toggle: hsl(230, 22%, 74%); /* Light theme toggle color */\n  /* Dark Theme Colors */\n  --dark-bg: hsl(230, 17%, 14%); /* Background color for dark theme */\n  --dark-top-bg: hsl(232, 19%, 15%); /* Top section background */\n  --dark-card: hsl(228, 28%, 20%); /* Card background */\n  --dark-text1: hsl(228, 34%, 66%); /* Secondary text color */\n  --dark-text2: hsl(0, 0%, 100%); /* Primary text color (white) */\n  /* Light Theme Colors */\n  --light-bg: hsl(0, 0%, 100%); /* Background color for light theme */\n  --light-top-bg: hsl(225, 100%, 98%); /* Top section background */\n  --light-card: hsl(227, 47%, 96%); /* Card background */\n  --light-text: hsl(228, 12%, 44%); /* Secondary text color */\n  --light-text2: hsl(230, 17%, 14%); /* Primary text color (dark blue) */\n}\n\n/*\n   Notes:\n   1. Using HSL (Hue, Saturation, Lightness) makes it easier to tweak colors consistently.\n   2. Instagram and dark theme toggle buttons use gradients, defined by start and end colors.\n   3. The dark and light themes are defined with separate background, card, and text colors.\n   4. These variables can be easily applied using the `var()` function in CSS.\n\n   Example Usage:\n   background: var(--dark-bg);\n   color: var(--light-text);\n*/\n/*\n   Use `@forward` to re-export styles from other files/modules.\n   This helps in organizing the project by splitting it into smaller, reusable parts.\n   Any file importing this file will have access to all forwarded modules.\n*/\n/* Instead of using media queries directly throughout the codebase like:\n   @media (min-width: 50em) { ... }\n   we can use **breakpoints** and **mixins** to make the code reusable,\n   easier to maintain, and more consistent.\n\n   Mixins are reusable code blocks that can be included multiple times wherever needed.\n*/\n/* Define breakpoints for \"up\" media queries (min-width values) */\n/* Define breakpoints for \"down\" media queries (max-width values) */\n/*\n   Define a mixin for \"up\" media queries using the breakpoints-up map.\n   This mixin will apply styles when the screen width is greater than or equal to the specified size.\n*/\n/*\n   Define a mixin for \"down\" media queries using the breakpoints-down map.\n   This mixin will apply styles when the screen width is less than or equal to the specified size.\n*/\n/*\n   To use the mixin, we use the @include directive with the desired breakpoint size.\n\n   Example usage:\n   -----------------\n   If we want to apply a larger font size for <h1> elements on large screens:\n*/\n/*\nh1 {\n    @include breakpoint(large) {\n        font-size: 3rem; // Increase font size for screens >= 1024px\n    }\n}\n*/\n/*\n   Benefits of using mixins:\n   -------------------------\n   1. **Code reusability**: Instead of writing repetitive media queries, we use mixins with predefined breakpoints.\n   2. **Maintainability**: If we ever need to update the breakpoint values, we only need to change them in one place.\n   3. **Readability**: Using @include makes the code cleaner and easier to understand.\n\n   Additional Notes:\n   -----------------\n   - The **@content** directive in the mixin allows the block of CSS code passed by @include to be inserted at that location.\n   - The use of **em** units ensures that the breakpoints are scalable and relative to the root font size.\n*/\n/*\n   Function to convert pixel values to rem units.\n   This helps ensure the design remains scalable and responsive by using relative units.\n   The default context (root font size) is set to 16px, but it can be customized.\n*/\n/* Example usage:\nh1 {\n   font-size: rem(30);  // Returns 2rem when context is 16px\n}\n\ninstead of\n\nh1 {\n    font-size: 1.875rem;\n}\n*/\n/*\n   Explanation:\n   1. `@forward` is part of the Sass module system. It allows re-exporting styles from other Sass files.\n   2. This approach promotes modularity by grouping related styles into separate files.\n   3. Files importing this module don't need to import each individual file separately—they inherit all forwarded content.\n\n   Example usage:\n   In a main file (e.g., `main.scss`), you can simply do:\n   @use 'settings';\n   All variables, functions, and mixins forwarded by 'settings' will be accessible.\n*/\n/*\n   Apply consistent padding to the `.card` component using a custom rem function.\n   This ensures responsive and scalable spacing based on the root font size.\n*/\n.card {\n  padding: 1.25rem; /* Converts 20px to rem units using the custom `rem` function */\n}\n\n/*\n   Explanation:\n   1. The `rem` function likely converts pixel values to rems by dividing the given pixel value by the root font size.\n   2. Using rem units ensures that spacing scales appropriately if the root font size changes.\n   3. This approach enhances accessibility and responsiveness, especially for users who adjust their browser's default font size.\n\n   Example:\n   If the root font size is 16px, `rem(20)` returns `1.25rem` (20px / 16px).\n*/\n/*\n   Define styles for the `.toggle` component.\n   Use a nested selector for the toggle button to maintain a clear hierarchy.\n*/\n.toggle__button { /* BEM naming convention: child element of `.toggle` */\n  width: 1rem; /* Width set using custom rem function for scalability */\n  height: 1rem; /* Height set using custom rem function for consistency */\n  border-radius: 50%; /* Makes the button perfectly circular */\n  background-color: var(--toggle); /* Background color set using a CSS variable */\n}\n\n/*\n   Explanation:\n   1. Using `&__button` ensures a clear relationship between the parent `.toggle` and its child element, following the BEM (Block Element Modifier) methodology.\n   2. The `rem` function converts fixed pixel values to rem units, ensuring responsiveness and accessibility.\n   3. `border-radius: 50%` creates a circular button.\n   4. `background-color` is set using the `--toggle` variable, which makes it easy to switch themes or update the color globally.\n*/","/*\r\n   Remove default top margin for headings to maintain consistent spacing \r\n   and prevent unnecessary extra space at the top of sections.\r\n*/\r\n\r\nh1, h2, h3 {\r\n    margin-top: 0; /* Eliminates default top margin applied by browsers */\r\n}\r\n\r\n/*\r\n   Remove default text decoration (underline) for anchor tags in all states.\r\n   This provides a cleaner, minimal design for links.\r\n*/\r\n\r\na, a:visited, a:active {\r\n    text-decoration: none; /* No underline for links in normal, visited, or active states */\r\n}\r\n\r\n/*\r\n   Explanation:\r\n   1. Removing `margin-top` on headings avoids unexpected spacing issues when stacking multiple sections.\r\n   2. Resetting `text-decoration` for links allows better control over link appearance, enabling the use of custom styles (e.g., color, hover effects).\r\n   3. Consider adding hover styles (e.g., `a:hover { text-decoration: underline; }`) for better user experience.\r\n*/\r\n","//from style-guide\r\n:root {\r\n    --font-inter: 'Inter', sans-serif;\r\n}\r\n\r\n\r\n","/*\r\n   Define color variables for primary, social media, and theme-specific colors.\r\n   Using CSS variables makes it easy to switch between dark and light themes.\r\n*/\r\n\r\n:root {\r\n    /* Primary Colors */\r\n    --limegreen: hsl(163, 72%, 41%);      /* Used for positive UI feedback */\r\n    --brightred: hsl(356, 69%, 56%);       /* Used for negative UI feedback */\r\n\r\n    /* Social Media Colors */\r\n    --facebook: hsl(208, 92%, 53%);\r\n    --twitter: hsl(203, 89%, 53%);\r\n    --instagram-start: hsl(37, 92%, 70%);  /* Instagram gradient start */\r\n    --instagram-end: hsl(329, 70%, 58%);   /* Instagram gradient end */\r\n    --youtube: hsl(348, 97%, 39%);\r\n\r\n    /* Toggle Button Colors */\r\n    --toggle-bg-start: hsl(210, 78%, 56%); /* Dark theme toggle gradient start */\r\n    --toggle-bg-end: hsl(146, 68%, 55%);   /* Dark theme toggle gradient end */\r\n    --toggle: hsl(230, 22%, 74%);          /* Light theme toggle color */\r\n\r\n    /* Dark Theme Colors */\r\n    --dark-bg: hsl(230, 17%, 14%);         /* Background color for dark theme */\r\n    --dark-top-bg: hsl(232, 19%, 15%);     /* Top section background */\r\n    --dark-card: hsl(228, 28%, 20%);       /* Card background */\r\n    --dark-text1: hsl(228, 34%, 66%);      /* Secondary text color */\r\n    --dark-text2: hsl(0, 0%, 100%);        /* Primary text color (white) */\r\n\r\n    /* Light Theme Colors */\r\n    --light-bg: hsl(0, 0%, 100%);          /* Background color for light theme */\r\n    --light-top-bg: hsl(225, 100%, 98%);   /* Top section background */\r\n    --light-card: hsl(227, 47%, 96%);      /* Card background */\r\n    --light-text: hsl(228, 12%, 44%);      /* Secondary text color */\r\n    --light-text2: hsl(230, 17%, 14%);     /* Primary text color (dark blue) */\r\n}\r\n\r\n/*\r\n   Notes:\r\n   1. Using HSL (Hue, Saturation, Lightness) makes it easier to tweak colors consistently.\r\n   2. Instagram and dark theme toggle buttons use gradients, defined by start and end colors.\r\n   3. The dark and light themes are defined with separate background, card, and text colors.\r\n   4. These variables can be easily applied using the `var()` function in CSS.\r\n\r\n   Example Usage:\r\n   background: var(--dark-bg);\r\n   color: var(--light-text);\r\n*/\r\n","@use '../util' as *;\r\n\r\n/*\r\n   Apply consistent padding to the `.card` component using a custom rem function.\r\n   This ensures responsive and scalable spacing based on the root font size.\r\n*/\r\n\r\n.card {\r\n    padding: rem(20); /* Converts 20px to rem units using the custom `rem` function */\r\n}\r\n\r\n/*\r\n   Explanation:\r\n   1. The `rem` function likely converts pixel values to rems by dividing the given pixel value by the root font size.\r\n   2. Using rem units ensures that spacing scales appropriately if the root font size changes.\r\n   3. This approach enhances accessibility and responsiveness, especially for users who adjust their browser's default font size.\r\n\r\n   Example:\r\n   If the root font size is 16px, `rem(20)` returns `1.25rem` (20px / 16px).\r\n*/\r\n","@use '../util' as *;\r\n\r\n/*\r\n   Define styles for the `.toggle` component.\r\n   Use a nested selector for the toggle button to maintain a clear hierarchy.\r\n*/\r\n\r\n.toggle {\r\n    &__button {                      /* BEM naming convention: child element of `.toggle` */\r\n        width: rem(16);              /* Width set using custom rem function for scalability */\r\n        height: rem(16);             /* Height set using custom rem function for consistency */\r\n        border-radius: 50%;          /* Makes the button perfectly circular */\r\n        background-color: var(--toggle); /* Background color set using a CSS variable */\r\n    }\r\n}\r\n\r\n/*\r\n   Explanation:\r\n   1. Using `&__button` ensures a clear relationship between the parent `.toggle` and its child element, following the BEM (Block Element Modifier) methodology.\r\n   2. The `rem` function converts fixed pixel values to rem units, ensuring responsiveness and accessibility.\r\n   3. `border-radius: 50%` creates a circular button.\r\n   4. `background-color` is set using the `--toggle` variable, which makes it easy to switch themes or update the color globally.\r\n*/\r\n"]}