@use '../util' as *;

/*
   Define styles for the `.toggle` component.
   Use a nested selector for the toggle button to maintain a clear hierarchy.
*/

.toggle {
    display: grid;
    grid-template-columns: 1fr rem(60) 1fr;
    grid-template-rows: repeat(2, 1fr);
    gap: rem(4.8) rem(8);
    border: none;
    margin: 0;

    label {
        font-size: rem(14);
        align-self: center;

        &[for='dark'] {
            grid-column: 1 / 2;
            justify-self: end;
        }
        &[for='system'] {
            grid-column: 1 / 4;
            grid-row: 2 / 3;
            justify-self: center;
            align-self: start;
        }
        &[for='light'] {
            grid-column: 3 / 4;
        }
    }

    &__wrapper {
        position: relative;
        grid-column: 2/ 3;
        grid-row: 1 / 2;
        height: rem(24);
    }

    input[type="radio"]{
        margin: 0 rem(-2) 0 rem(-2);
        opacity: 0;
        width: rem(20);
        height: rem(24);

        &:focus ~ .toggle__button {
            border: rem(2) solid white;
        }
    }

    &__background {
        border-radius: rem(12);
        height: 100%;
        position: absolute;
        width: 100%;
        top: 0;
        display: block;
        background: linear-gradient(225deg, var(--toggle-bg-end) 0%, var(--toggle-bg-start) 98.82%);
        pointer-events: none;
    }

    &__button {                      /* BEM naming convention: child element of `.toggle` */
        position: absolute;
        left: rem(3);
        top: rem(3);
        right: 100%;
        width: rem(18);              /* Width set using custom rem function for scalability */
        height: rem(18);             /* Height set using custom rem function for consistency */
        border-radius: 50%;          /* Makes the button perfectly circular */
        background-color: var(--dark-bg); /* Background color set using a CSS variable */
        transition: all 150ms ease-in-out;
    }


/*
   Explanation:
   1. Using `&__button` ensures a clear relationship between the parent `.toggle` and its child element, following the BEM (Block Element Modifier) methodology.
   2. The `rem` function converts fixed pixel values to rem units, ensuring responsiveness and accessibility.
   3. `border-radius: 50%` creates a circular button.
   4. `background-color` is set using the `--toggle` variable, which makes it easy to switch themes or update the color globally.
*/

    #light:checked ~ .toggle__button {
        left: calc(100% - 21px);
        right: 3px;
    }

    #system:checked ~ .toggle__button {
        left: 50%;
        right: auto;
        transform: translate(-50%);
    }
}